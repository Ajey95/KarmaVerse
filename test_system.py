#!/usr/bin/env python3
"""
VisionGuard AI - System Test Script
Quick test to verify all components are working.
"""

import os
import sys
import traceback
from datetime import datetime

def test_imports():
    """Test if all required modules can be imported."""
    print("üîç Testing imports...")
    
    try:
        import streamlit as st
        print("  ‚úì Streamlit")
        
        import cv2
        print("  ‚úì OpenCV")
        
        import face_recognition
        print("  ‚úì Face Recognition")
        
        import google.generativeai as genai
        print("  ‚úì Google Generative AI")
        
        import pandas as pd
        print("  ‚úì Pandas")
        
        import numpy as np
        print("  ‚úì NumPy")
        
        import plotly.express as px
        print("  ‚úì Plotly")
        
        return True
        
    except ImportError as e:
        print(f"  ‚ùå Import error: {e}")
        return False

def test_core_modules():
    """Test if our core modules can be imported and initialized."""
    print("\nüß© Testing core modules...")
    
    try:
        # Add current directory to path
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        
        from core.video_processor import VideoProcessor
        vp = VideoProcessor()
        print("  ‚úì VideoProcessor")
        
        from core.face_verification import FaceVerificationSystem
        fv = FaceVerificationSystem()
        print("  ‚úì FaceVerificationSystem")
        
        from core.detection_engine import ObjectDetectionEngine, ZoneContextManager
        ode = ObjectDetectionEngine()
        zcm = ZoneContextManager()
        print("  ‚úì ObjectDetectionEngine & ZoneContextManager")
        
        from core.audio_anomaly_detector import AudioAnomalyDetector
        aad = AudioAnomalyDetector()
        print("  ‚úì AudioAnomalyDetector")
        
        from core.alert_manager import AlertManager
        am = AlertManager()
        print("  ‚úì AlertManager")
        
        # Test Gemini only if API key is available
        api_key = os.getenv('GEMINI_API_KEY')
        if api_key and api_key != 'your_gemini_api_key_here':
            from core.gemini_client import GeminiSecurityAnalyzer
            ga = GeminiSecurityAnalyzer()
            print("  ‚úì GeminiSecurityAnalyzer")
        else:
            print("  ‚ö†Ô∏è  GeminiSecurityAnalyzer (API key not configured)")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Module error: {e}")
        traceback.print_exc()
        return False

def test_directories():
    """Test if required directories exist."""
    print("\nüìÅ Testing directories...")
    
    required_dirs = [
        "data",
        "data/authorized_faces",
        "data/alerts", 
        "data/logs",
        "core"
    ]
    
    all_exist = True
    for directory in required_dirs:
        if os.path.exists(directory):
            print(f"  ‚úì {directory}")
        else:
            print(f"  ‚ùå {directory} - MISSING")
            all_exist = False
    
    return all_exist

def test_enhanced_detection():
    """Test enhanced detection with zones and audio."""
    print("\nüéØ Testing enhanced detection systems...")
    
    try:
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from core.video_processor import VideoProcessor
        from core.audio_anomaly_detector import AudioAnomalyDetector
        from core.detection_engine import ZoneContextManager
        
        vp = VideoProcessor()
        aad = AudioAnomalyDetector()
        zcm = ZoneContextManager()
        
        # Test zone configuration
        zones = zcm.zones
        print(f"  ‚úì Campus zones configured: {len(zones)}")
        
        # Test audio anomaly types
        anomaly_types = aad.anomaly_types
        print(f"  ‚úì Audio anomaly types: {len(anomaly_types)}")
        
        # Test enhanced mock detection
        enhanced_event = vp.generate_mock_detection()
        if 'zone_context' in enhanced_event or 'detected_objects' in enhanced_event:
            print("  ‚úì Enhanced detection with zone context")
        else:
            print("  ‚ö†Ô∏è  Basic detection (enhanced features may not be active)")
        
        # Test audio simulation
        audio_detection = aad.simulate_audio_detection("main_gate", "unauthorized_entry")
        if audio_detection:
            print(f"  ‚úì Audio detection simulation: {audio_detection['anomaly_type']}")
        else:
            print("  ‚úì Audio detection (no anomaly generated)")
        
        return True
    except Exception as e:
        print(f"  ‚ùå Enhanced detection error: {e}")
        return False

def test_alert_management():
    """Test alert saving and loading."""
    print("\nüö® Testing alert management...")
    
    try:
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from core.alert_manager import AlertManager
        from core.video_processor import VideoProcessor
        
        am = AlertManager()
        vp = VideoProcessor()
        
        # Generate a test event
        test_event = vp.generate_mock_detection()
        
        # Create a test alert
        test_alert = {
            'alert': 'üö® Test Alert',
            'priority': 3,
            'recommended_action': 'Test action',
            'explanation': 'This is a test alert',
            'source_event': test_event,
            'analysis_timestamp': datetime.now().isoformat(),
            'analyzer': 'Test System'
        }
        
        # Save alert
        alert_id = am.save_alert(test_alert)
        if alert_id:
            print(f"  ‚úì Alert saved with ID: {alert_id}")
        else:
            print("  ‚ùå Failed to save alert")
            return False
        
        # Load alerts
        alerts = am.load_alerts(limit=1)
        if alerts:
            print(f"  ‚úì Alert loaded: {alerts[0]['alert']}")
        else:
            print("  ‚ùå Failed to load alerts")
            return False
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Alert management error: {e}")
        return False

def test_gemini_connection():
    """Test Gemini API connection (if configured)."""
    print("\nü§ñ Testing Gemini connection...")
    
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key or api_key == 'your_gemini_api_key_here':
        print("  ‚ö†Ô∏è  Skipping - API key not configured")
        print("     Add your Gemini API key to .env file to test")
        return True
    
    try:
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from core.gemini_client import GeminiSecurityAnalyzer
        
        ga = GeminiSecurityAnalyzer()
        health = ga.health_check()
        
        if health.get('status') == 'healthy':
            print("  ‚úì Gemini API connection successful")
            return True
        else:
            print(f"  ‚ùå Gemini API error: {health.get('error', 'Unknown error')}")
            return False
        
    except Exception as e:
        print(f"  ‚ùå Gemini connection error: {e}")
        return False

def run_full_test():
    """Run complete system test."""
    print("üõ°Ô∏è  VisionGuard AI - System Test")
    print("="*40)
    
    tests = [
        ("Imports", test_imports),
        ("Directories", test_directories), 
        ("Core Modules", test_core_modules),
        ("Enhanced Detection", test_enhanced_detection),
        ("Alert Management", test_alert_management),
        ("Gemini Connection", test_gemini_connection)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"\n‚ùå {test_name} test failed with exception: {e}")
            results[test_name] = False
    
    # Print summary
    print("\n" + "="*40)
    print("üìä Test Results Summary")
    print("="*40)
    
    passed = 0
    total = len(tests)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nTotal: {passed}/{total} tests passed")
    
    if passed == total:
        print("\nüéâ All tests passed! System is ready to run.")
        print("   Run: streamlit run app.py")
    else:
        print("\n‚ö†Ô∏è  Some tests failed. Check the errors above.")
        print("   Try running: python setup.py")
    
    return passed == total

if __name__ == "__main__":
    success = run_full_test()
    sys.exit(0 if success else 1)